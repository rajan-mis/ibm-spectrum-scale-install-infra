---
# Dir package installation method

- block:  ## run_once: true
    - name: install | Stat local installation package
      stat:
        path: "{{ scale_install_directory_pkg_path }}"
      register: scale_install_dirpkg

    - name: install | Check local installation package
      assert:
        that: scale_install_dirpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_directory_pkg_path' to point to the
          local installation package (accessible on Ansible control machine)!
  run_once: true
  delegate_to: localhost

- name: install | Stat extracted packages
  stat:
    path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_directory_pkg_path | basename }}"
  register: scale_install_gpfs_rpmdir

#
# Copy installation directory package to /tmp
#
- block:  ## when: not scale_install_gpfs_rpmdir.stat.exists
    - name: install | Stat temporary directory
      stat:
        path: "{{ scale_install_localpkg_tmpdir_path }}"
      register: scale_install_localpkg_tmpdir

    - name: install | Check temporary directory
      assert:
        that:
          - scale_install_localpkg_tmpdir.stat.exists
          - scale_install_localpkg_tmpdir.stat.isdir
        msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!

    - name: install | Copy installation package to node
      copy:
        src: "{{ scale_install_directory_pkg_path }}"
        dest: "{{ scale_install_localpkg_tmpdir_path }}"
        mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists

- name: install | Extract installation package
  set_fact:
    dir_path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_directory_pkg_path | basename }}"

- name: install | gpfs base path
  set_fact:
    gpfs_path_url: "{{ dir_path }}"
  when: scale_install_directory_pkg_path is defined

#
# Find GPFS GUI
#
- block:  ## when: host is defined as a gui node
    - name: install | Find GPFS GUI (gpfs.gui) RPM
      find:
        paths: "{{ gpfs_path_url }}"
        patterns: gpfs.gui-*.noarch.rpm
      register: scale_install_gpfs_gui

    - name: install | Check valid GPFS GUI (gpfs.gui) RPM
      assert:
        that: scale_install_gpfs_gui.matched > 0
        msg: >-
          No GPFS GUI (gpfs.gui) RPM found:
          "{{ gpfs_path_url }}/gpfs_rpms/gpfs.gui-*.noarch.rpm"
    #
    # Find GPFS gpfs.java
    #
    - name: install | Find GPFS java (gpfs.java) RPM
      find:
        paths: "{{ gpfs_path_url }}"
        patterns: gpfs.java-*.{{ scale_architecture }}.rpm
      register: scale_install_gpfs_java

    - name: install | Check valid GPFS java (gpfs.java) RPM
      assert:
        that: scale_install_gpfs_java.matched > 0
        msg: >-
          No GPFS java (gpfs.java) RPM found:
          "{{ gpfs_path_url }}/gpfs.java-*.{{ scale_architecture }}.rpm"

    - name: install | Add GPFS GUI RPMs to list
      vars:
        current_rpm: "{{ gpfs_path_url }}/{{ item }}.rpm"
      set_fact:
        scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
      with_items:
        - "{{ scale_install_gpfs_gui.files.0.path | basename | regex_replace('\\.rpm$', '') }}"
        - "{{ scale_install_gpfs_java.files.0.path | basename | regex_replace('\\.rpm$', '') }}"

  when: scale_cluster_gui | bool
